########################################################################################
# https://turbo.build/repo/docs/ci/github-actions
# ****************** secrets 필요 ******************
# SERVER_HOST: 배포할 서버의 IP 주소나 도메인
# SERVER_USERNAME: 서버 접속 사용자명
# SERVER_SSH_KEY: 서버 접속용 SSH 개인키
# TURBO_TOKEN: 터보빌드 빌드 캐시등에 필요한 토큰
# *** 프로젝트가 추가 되었을 때 ***
# Deploy to server 부분 스크립트에서 port 를 추가 한다. 
# 예시)
# - name: Deploy to server
# uses: appleboy/ssh-action@master
# with:
#  .... 내용 생략
#    docker run -d --name all-apps -p 80:12000 -p 80:12001 <----이 부분 해당 포트 추가
#     ... 내용 생략
# **************************************************
########################################################################################
name: Deploy to AWS EC2

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-deploy:
    name: Build and Deploy to Prod
    environment: production
    timeout-minutes: 30
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      TURBO_CACHE: "remote:rw"

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.14.4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 21
          cache: 'pnpm'

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Check for pnpm-lock.yaml
        run: |
          if [ ! -f pnpm-lock.yaml ]; then
            echo "pnpm-lock.yaml not found. Creating it..."
            pnpm install
          fi

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          pnpm recursive install

      - name: Build for production
        run: |
          export NODE_OPTIONS="--max-old-space-size=8192"
          pnpm turbo run build:production --filter=!./apps/front-design

      - name: Test all projects except front-design
        run: pnpm turbo run test --filter=!./apps/front-design

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2
          
      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names vita-monorepo-apps 2>/dev/null || \
          aws ecr create-repository --repository-name vita-monorepo-apps

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vita-monorepo-apps
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg BUILD_ENV=production -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22  # 포트 명시적 지정
          timeout: 60s  # 타임아웃 시간 증가
          script: |
            # 필요한 패키지 설치
            sudo apt-get update
            sudo apt-get install -y unzip
            
            # AWS CLI 설치
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update

            # AWS 자격 증명 설정
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}

            # ECR 로그인 및 도커 실행
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/vita-monorepo-apps:${{ github.sha }}
            docker stop vita-monorepo-apps || true
            docker rm vita-monorepo-apps || true
            docker run -d --name vita-monorepo-apps \
              -p 80:12000 \
              -e NUXT_HOST=0.0.0.0 \
              -e PORT=12000 \
              -e NITRO_PORT=12000 \
              -e NUXT_PORT=12000 \
              -e NODE_ENV=production \
              --restart always ${{ steps.login-ecr.outputs.registry }}/vita-monorepo-apps:${{ github.sha }}

      - name: Remove Github Actions IP from security group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}